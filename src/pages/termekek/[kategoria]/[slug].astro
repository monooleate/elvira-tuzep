---
import Layout from '../../../layouts/PageLayout.astro'
import productsData from '../../../data/products.json'
import ModalWrapper from '~/components/ui/ModalWrapper.jsx';
import QuantitySelector from '~/components/common/QuantitySelector.tsx';
import ProductInteractiveBlock from '~/components/common/ProductInteractiveBlock.jsx';

export async function getStaticPaths() {
  const paths = [];
  for (const category of productsData) {
    for (const product of category.products) {
      paths.push({
        params: {
          kategoria: category.slug,
          slug: product.slug,
        },
      });
    }
  }
  return paths;
}

const { params } = Astro;

const category = productsData.find((c) => c.slug === params.kategoria);
if (!category) throw new Error(`Nincs ilyen kategória: ${params.kategoria}`);

const product = category.products.find((p) => p.slug === params.slug);
if (!product) throw new Error(`Nincs ilyen termék: ${params.slug}`);

const hasPercent = typeof product.discountPercent === 'number' && product.discountPercent > 0;
const hasValidDiscountPrice = typeof product.discountPrice === 'number' && product.discountPrice > 0;
const hasDiscount = hasPercent || hasValidDiscountPrice;
const discountPrice = hasValidDiscountPrice
  ? product.discountPrice
  : (hasPercent ? Math.round(product.price * (1 - product.discountPercent / 100)) : null);
const discountPercent = hasPercent
  ? product.discountPercent
  : (hasValidDiscountPrice ? Math.round((1 - discountPrice / product.price) * 100) : null);

const metadata = {
  title: product.meta.title,
  description: product.meta.description,
  openGraph: {
    images: [product.image],
  },
  twitter: {
    image: product.image,
  },
};

const schemaProduct = {
  "@context": "https://schema.org",
  "@type": "Product",
  "name": product.name,
  "image": product.image,
  "description": product.description,
  "sku": product.sku,
  "brand": {
    "@type": "Brand",
    "name": "Elvira Tüzép"
  },
  "offers": {
    "@type": "Offer",
    "priceCurrency": "HUF",
    "price": hasDiscount && discountPrice ? discountPrice : product.price,
    "availability": product.stock > 0 ? "https://schema.org/InStock" : "https://schema.org/OutOfStock",
    "url": `https://elvirabau.hu/termekek/${category.slug}/${product.slug}`,
    "itemCondition": "https://schema.org/NewCondition"
  }
};

const schemaBreadcrumb = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Főoldal",
      "item": "https://elvirabau.hu/"
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Termékek",
      "item": "https://elvirabau.hu/termekek"
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": category.category,
      "item": `https://elvirabau.hu/termekek/${category.slug}`
    },
    {
      "@type": "ListItem",
      "position": 4,
      "name": product.name,
      "item": `https://elvirabau.hu/termekek/${category.slug}/${product.slug}`
    }
  ]
};

---
    <head>

  <script type="application/ld+json" set:html={JSON.stringify(schemaProduct)} />
  <script type="application/ld+json" set:html={JSON.stringify(schemaBreadcrumb)} />

</head>
<Layout metadata={metadata}>

  <section class="py-12">
    <div class="max-w-4xl mx-auto px-4">
<!-- Breadcrumb -->
<div class="sticky top-[70px] 2xl:top-[90px] z-20 bg-white dark:bg-gray-900 px-4 py-2 shadow-sm">
  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm text-gray-500 dark:text-gray-400 mb-0">
    
    <nav class="mb-2 sm:mb-0" aria-label="Breadcrumb">
      <a href="/" class="hover:underline">Főoldal</a> /
      <a href="/termekek" class="hover:underline">Termékek</a> /
      <a href={`/termekek/${category.slug}`} class="hover:underline">{category.category}</a> /
      <span class="font-medium text-gray-800 dark:text-gray-200">{product.name}</span>
    </nav>

    <a href={`/termekek/${category.slug}`} class="text-blue-600 hover:underline dark:text-blue-400">
      ← Vissza a(z) {category.category} kategóriához
    </a>
  </div>
</div>



      <!-- Termék adatblokk -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-10 pt-10">
        <div class="relative">
          <img src={product.image} alt={product.name} class="rounded shadow w-full object-cover" />
          {hasDiscount && discountPercent !== null && (
            <>
              <div class="absolute top-2 left-2 bg-red-600 text-white px-3 py-1 text-xs font-bold rounded shadow">
                Akció
              </div>
              <div class="absolute top-2 right-2 bg-red-600 text-white px-3 py-1 text-xs font-bold rounded shadow">
                -{discountPercent}%
              </div>
            </>
          )}
        </div>
        <div>
          <h1 class="text-3xl font-bold mb-2">{product.name}</h1>
          <p class="text-sm text-gray-500 dark:text-gray-400">Cikkszám: {product.sku}</p></br>
          <p class="text-gray-600 dark:text-gray-400 mb-4">{product.description}</p>
          <div class="text-lg font-semibold mb-4">
            {
              hasDiscount && discountPrice !== null ? (
                <>
                  Nettó ár: <span class="line-through text-gray-500 mr-2">{product.price.toLocaleString()} Ft</span>
                  <span class="text-red-600 font-bold">{discountPrice.toLocaleString()} Ft</span>
                </>
              ) : (
                `Nettó ár: ${product.price.toLocaleString()} Ft`
              )
           }
          </div>
          <div>
  {product.stock > 0 ? (
    <span class="text-green-600">Raktáron</span>
  ) : (
    <span class="text-red-600">Nincs raktáron</span>
  )}
</div>
          

      

          
            <ProductInteractiveBlock product={product} client:load />
          

          
        </div>
      </div>

      <!-- Leírás + Táblázat flex elrendezésben -->
      <div class="mt-10 flex flex-col md:flex-row gap-8">
        

        <!-- Műszaki adatok táblázat -->
        {product.specs && (
          <div class="md:w-1/2">
            <h2 class="text-xl font-bold mb-2">További információk</h2>
            <table class="w-full text-sm text-left border border-gray-300 dark:border-gray-600 overflow-hidden rounded-lg">
              <tbody>
                {Object.entries(product.specs).map(([label, value], index) => (
                  <tr class={`border-b ${index % 2 === 0 ? 'bg-gray-50 dark:bg-gray-800' : 'bg-white dark:bg-gray-700'}`}>
                    <th class="py-2 px-4 font-medium w-1/3 text-gray-700 dark:text-gray-200">{label}</th>
                    <td class="py-2 px-4 text-gray-600 dark:text-gray-300">{value}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        <!-- Hosszú leírás -->
        {product.longDescription && (
          <div class="md:w-1/2">
            <h2 class="text-xl font-bold mb-2">Termékleírás</h2>
            <p class="text-gray-700 dark:text-gray-300 leading-relaxed">{product.longDescription}</p>
          </div>
        )}
      </div>
    </div>
  </section>
</Layout>
